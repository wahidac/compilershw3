

const methods_LS
  :LS.Start
  :LS.Print
  :LS.Search
  :LS.Init

func Main()
  t.0 = HeapAllocZ(12)
  [t.0+0] = :methods_LS
  if t.0 goto :null0
    Error("null pointer")
  null0:
  t.1 = t.0
  t.2 = 10
  t.3 = [t.1+0]
  t.4 = [t.3+0]
  t.5 = call t.4(t.1 t.2)
  PrintIntS(t.5)
  ret

func LS.Start(this sz)

  t.0 = this
  t.1 = sz
  t.2 = [t.0+0]
  t.3 = [t.2+12]
  t.4 = call t.3(t.0 t.1)
  aux01 = t.4
  t.5 = this

  t.6 = [t.5+0]
  t.7 = [t.6+4]
  t.8 = call t.7(t.5)
  aux02 = t.8
  t.9 = 9999
  PrintIntS(t.9)
  t.10 = this
  t.11 = 8
  t.12 = [t.10+0]
  t.13 = [t.12+8]
  t.14 = call t.13(t.10 t.11)
  PrintIntS(t.14)
  t.15 = this
  t.16 = 12
  t.17 = [t.15+0]
  t.18 = [t.17+8]
  t.19 = call t.18(t.15 t.16)
  PrintIntS(t.19)
  t.20 = this
  t.21 = 17
  t.22 = [t.20+0]
  t.23 = [t.22+8]
  t.24 = call t.23(t.20 t.21)
  PrintIntS(t.24)
  t.25 = this
  t.26 = 50
  t.27 = [t.25+0]
  t.28 = [t.27+8]
  t.29 = call t.28(t.25 t.26)
  PrintIntS(t.29)
  t.30 = 55
  ret t.30
func LS.Print(this )

  t.0 = 1
  j = t.0
  while0_top:
    t.1 = j
    t.2 = [this+8]
    t.3 = LtS(t.1 t.2)
    if0 t.3 goto :else0

      t.4 = [this+4]
      t.5 = j
      t.6 = [t.4+0]
      t.6 = LtS(t.5 t.6)
      if t.6 goto :bounds0
        Error("array index out of bounds")
      bounds0:
      t.5 = MulS(t.5 4)
      t.4 = Add(t.4 t.5)
      t.7 = [t.4+4]
      PrintIntS(t.7)
      t.8 = j
      t.9 = 1
      t.10 = Add(t.8 t.9)
      j = t.10
      goto :else_end0
    else0:
      goto :while0_end
    else_end0:
    goto :while0_top
  while0_end:
  t.11 = 0
  ret t.11
func LS.Search(this num)

  t.0 = 1
  j = t.0
  t.1 = 0
  ls01 = t.1
  t.2 = 0
  ifound = t.2
  while1_top:
    t.3 = j
    t.4 = [this+8]
    t.5 = LtS(t.3 t.4)
    if0 t.5 goto :else3

      t.6 = [this+4]
      t.7 = j
      t.8 = [t.6+0]
      t.8 = LtS(t.7 t.8)
      if t.8 goto :bounds1
        Error("array index out of bounds")
      bounds1:
      t.7 = MulS(t.7 4)
      t.6 = Add(t.6 t.7)
      t.9 = [t.6+4]
      aux01 = t.9
      t.10 = num
      t.11 = 1
      t.12 = Add(t.10 t.11)
      aux02 = t.12
      t.13 = aux01
      t.14 = num
      t.15 = LtS(t.13 t.14)
      if0 t.15 goto :else2
        t.16 = 0
        nt = t.16
        goto :else_end2
      else2:
        t.17 = aux01
        t.18 = aux02
        t.19 = LtS(t.17 t.18)
        t.20 = Sub(1 t.19)
        if0 t.20 goto :else1
          t.21 = 0
          nt = t.21
          goto :else_end1
        else1:

          t.22 = 1
          ls01 = t.22
          t.23 = 1
          ifound = t.23
          t.24 = [this+8]
          j = t.24
        else_end1:
      else_end2:
      t.25 = j
      t.26 = 1
      t.27 = Add(t.25 t.26)
      j = t.27
      goto :else_end3
    else3:
      goto :while1_end
    else_end3:
    goto :while1_top
  while1_end:
  t.28 = ifound
  ret t.28
func LS.Init(this sz)

  t.0 = sz
  [this+8] = t.0
  t.1 = sz
  t.2 = call :AllocArray(t.1)
  [this+4] = t.2
  t.3 = 1
  j = t.3
  t.4 = [this+8]
  t.5 = 1
  t.6 = Add(t.4 t.5)
  k = t.6
  while2_top:
    t.7 = j
    t.8 = [this+8]
    t.9 = LtS(t.7 t.8)
    if0 t.9 goto :else4

      t.10 = 2
      t.11 = j
      t.12 = MulS(t.10 t.11)
      aux01 = t.12
      t.13 = k
      t.14 = 3
      t.15 = Sub(t.13 t.14)
      aux02 = t.15
      t.16 = j
      t.17 = aux01
      t.18 = aux02
      t.19 = Add(t.17 t.18)
      t.20 = [this+4]
      t.21 = [t.20+0]
      t.21 = LtS(t.16 t.21)
      if t.21 goto :bounds2
        Error("array index out of bounds")
      bounds2:
      t.16 = MulS(t.16 4)
      t.20 = Add(t.20 t.16)
      [t.20+4] = t.19
      t.22 = j
      t.23 = 1
      t.24 = Add(t.22 t.23)
      j = t.24
      t.25 = k
      t.26 = 1
      t.27 = Sub(t.25 t.26)
      k = t.27
      goto :else_end4
    else4:
      goto :while2_end
    else_end4:
    goto :while2_top
  while2_end:
  t.28 = 0
  ret t.28
func AllocArray(size)
  bytes = MulS(size 4)
  bytes = Add(bytes 4)
  v = HeapAllocZ(bytes)
  [v] = size
  ret v
