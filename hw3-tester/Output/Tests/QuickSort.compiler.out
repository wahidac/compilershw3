

const methods_QS
  :QS.Start
  :QS.Sort
  :QS.Print
  :QS.Init

func Main()
  t.0 = HeapAllocZ(12)
  [t.0+0] = :methods_QS
  if t.0 goto :null0
    Error("null pointer")
  null0:
  t.1 = t.0
  t.2 = 10
  t.3 = [t.1+0]
  t.4 = [t.3+0]
  t.5 = call t.4(t.1 t.2)
  PrintIntS(t.5)
  ret

func QS.Start(this sz)

  t.0 = this
  t.1 = sz
  t.2 = [t.0+0]
  t.3 = [t.2+12]
  t.4 = call t.3(t.0 t.1)
  aux01 = t.4
  t.5 = this

  t.6 = [t.5+0]
  t.7 = [t.6+8]
  t.8 = call t.7(t.5)
  aux01 = t.8
  t.9 = 9999
  PrintIntS(t.9)
  t.10 = [this+8]
  t.11 = 1
  t.12 = Sub(t.10 t.11)
  aux01 = t.12
  t.13 = this
  t.14 = 0
  t.15 = aux01
  t.16 = [t.13+0]
  t.17 = [t.16+4]
  t.18 = call t.17(t.13 t.14 t.15)
  aux01 = t.18
  t.19 = this

  t.20 = [t.19+0]
  t.21 = [t.20+8]
  t.22 = call t.21(t.19)
  aux01 = t.22
  t.23 = 0
  ret t.23
func QS.Sort(this left right)

  t.0 = 0
  t = t.0
  t.1 = left
  t.2 = right
  t.3 = LtS(t.1 t.2)
  if0 t.3 goto :else6

    t.4 = [this+4]
    t.5 = right
    t.6 = [t.4+0]
    t.6 = LtS(t.5 t.6)
    if t.6 goto :bounds0
      Error("array index out of bounds")
    bounds0:
    t.5 = MulS(t.5 4)
    t.4 = Add(t.4 t.5)
    t.7 = [t.4+4]
    v = t.7
    t.8 = left
    t.9 = 1
    t.10 = Sub(t.8 t.9)
    i = t.10
    t.11 = right
    j = t.11
    t.12 = 1
    cont01 = t.12
    while2_top:
      t.13 = cont01
      if0 t.13 goto :else5

        t.14 = 1
        cont02 = t.14
        while0_top:
          t.15 = cont02
          if0 t.15 goto :else1

            t.16 = i
            t.17 = 1
            t.18 = Add(t.16 t.17)
            i = t.18
            t.19 = [this+4]
            t.20 = i
            t.21 = [t.19+0]
            t.21 = LtS(t.20 t.21)
            if t.21 goto :bounds1
              Error("array index out of bounds")
            bounds1:
            t.20 = MulS(t.20 4)
            t.19 = Add(t.19 t.20)
            t.22 = [t.19+4]
            aux03 = t.22
            t.23 = aux03
            t.24 = v
            t.25 = LtS(t.23 t.24)
            t.26 = Sub(1 t.25)
            if0 t.26 goto :else0
              t.27 = 0
              cont02 = t.27
              goto :else_end0
            else0:
              t.28 = 1
              cont02 = t.28
            else_end0:
            goto :else_end1
          else1:
            goto :while0_end
          else_end1:
          goto :while0_top
        while0_end:
        t.29 = 1
        cont02 = t.29
        while1_top:
          t.30 = cont02
          if0 t.30 goto :else3

            t.31 = j
            t.32 = 1
            t.33 = Sub(t.31 t.32)
            j = t.33
            t.34 = [this+4]
            t.35 = j
            t.36 = [t.34+0]
            t.36 = LtS(t.35 t.36)
            if t.36 goto :bounds2
              Error("array index out of bounds")
            bounds2:
            t.35 = MulS(t.35 4)
            t.34 = Add(t.34 t.35)
            t.37 = [t.34+4]
            aux03 = t.37
            t.38 = v
            t.39 = aux03
            t.40 = LtS(t.38 t.39)
            t.41 = Sub(1 t.40)
            if0 t.41 goto :else2
              t.42 = 0
              cont02 = t.42
              goto :else_end2
            else2:
              t.43 = 1
              cont02 = t.43
            else_end2:
            goto :else_end3
          else3:
            goto :while1_end
          else_end3:
          goto :while1_top
        while1_end:
        t.44 = [this+4]
        t.45 = i
        t.46 = [t.44+0]
        t.46 = LtS(t.45 t.46)
        if t.46 goto :bounds3
          Error("array index out of bounds")
        bounds3:
        t.45 = MulS(t.45 4)
        t.44 = Add(t.44 t.45)
        t.47 = [t.44+4]
        t = t.47
        t.48 = i
        t.49 = [this+4]
        t.50 = j
        t.51 = [t.49+0]
        t.51 = LtS(t.50 t.51)
        if t.51 goto :bounds4
          Error("array index out of bounds")
        bounds4:
        t.50 = MulS(t.50 4)
        t.49 = Add(t.49 t.50)
        t.52 = [t.49+4]
        t.53 = [this+4]
        t.54 = [t.53+0]
        t.54 = LtS(t.48 t.54)
        if t.54 goto :bounds5
          Error("array index out of bounds")
        bounds5:
        t.48 = MulS(t.48 4)
        t.53 = Add(t.53 t.48)
        [t.53+4] = t.52
        t.55 = j
        t.56 = t
        t.57 = [this+4]
        t.58 = [t.57+0]
        t.58 = LtS(t.55 t.58)
        if t.58 goto :bounds6
          Error("array index out of bounds")
        bounds6:
        t.55 = MulS(t.55 4)
        t.57 = Add(t.57 t.55)
        [t.57+4] = t.56
        t.59 = j
        t.60 = i
        t.61 = 1
        t.62 = Add(t.60 t.61)
        t.63 = LtS(t.59 t.62)
        if0 t.63 goto :else4
          t.64 = 0
          cont01 = t.64
          goto :else_end4
        else4:
          t.65 = 1
          cont01 = t.65
        else_end4:
        goto :else_end5
      else5:
        goto :while2_end
      else_end5:
      goto :while2_top
    while2_end:
    t.66 = j
    t.67 = [this+4]
    t.68 = i
    t.69 = [t.67+0]
    t.69 = LtS(t.68 t.69)
    if t.69 goto :bounds7
      Error("array index out of bounds")
    bounds7:
    t.68 = MulS(t.68 4)
    t.67 = Add(t.67 t.68)
    t.70 = [t.67+4]
    t.71 = [this+4]
    t.72 = [t.71+0]
    t.72 = LtS(t.66 t.72)
    if t.72 goto :bounds8
      Error("array index out of bounds")
    bounds8:
    t.66 = MulS(t.66 4)
    t.71 = Add(t.71 t.66)
    [t.71+4] = t.70
    t.73 = i
    t.74 = [this+4]
    t.75 = right
    t.76 = [t.74+0]
    t.76 = LtS(t.75 t.76)
    if t.76 goto :bounds9
      Error("array index out of bounds")
    bounds9:
    t.75 = MulS(t.75 4)
    t.74 = Add(t.74 t.75)
    t.77 = [t.74+4]
    t.78 = [this+4]
    t.79 = [t.78+0]
    t.79 = LtS(t.73 t.79)
    if t.79 goto :bounds10
      Error("array index out of bounds")
    bounds10:
    t.73 = MulS(t.73 4)
    t.78 = Add(t.78 t.73)
    [t.78+4] = t.77
    t.80 = right
    t.81 = t
    t.82 = [this+4]
    t.83 = [t.82+0]
    t.83 = LtS(t.80 t.83)
    if t.83 goto :bounds11
      Error("array index out of bounds")
    bounds11:
    t.80 = MulS(t.80 4)
    t.82 = Add(t.82 t.80)
    [t.82+4] = t.81
    t.84 = this
    t.85 = left
    t.86 = i
    t.87 = 1
    t.88 = Sub(t.86 t.87)
    t.89 = [t.84+0]
    t.90 = [t.89+4]
    t.91 = call t.90(t.84 t.85 t.88)
    nt = t.91
    t.92 = this
    t.93 = i
    t.94 = 1
    t.95 = Add(t.93 t.94)
    t.96 = right
    t.97 = [t.92+0]
    t.98 = [t.97+4]
    t.99 = call t.98(t.92 t.95 t.96)
    nt = t.99
    goto :else_end6
  else6:
    t.100 = 0
    nt = t.100
  else_end6:
  t.101 = 0
  ret t.101
func QS.Print(this )

  t.0 = 0
  j = t.0
  while3_top:
    t.1 = j
    t.2 = [this+8]
    t.3 = LtS(t.1 t.2)
    if0 t.3 goto :else7

      t.4 = [this+4]
      t.5 = j
      t.6 = [t.4+0]
      t.6 = LtS(t.5 t.6)
      if t.6 goto :bounds12
        Error("array index out of bounds")
      bounds12:
      t.5 = MulS(t.5 4)
      t.4 = Add(t.4 t.5)
      t.7 = [t.4+4]
      PrintIntS(t.7)
      t.8 = j
      t.9 = 1
      t.10 = Add(t.8 t.9)
      j = t.10
      goto :else_end7
    else7:
      goto :while3_end
    else_end7:
    goto :while3_top
  while3_end:
  t.11 = 0
  ret t.11
func QS.Init(this sz)

  t.0 = sz
  [this+8] = t.0
  t.1 = sz
  t.2 = call :AllocArray(t.1)
  [this+4] = t.2
  t.3 = 0
  t.4 = 20
  t.5 = [this+4]
  t.6 = [t.5+0]
  t.6 = LtS(t.3 t.6)
  if t.6 goto :bounds13
    Error("array index out of bounds")
  bounds13:
  t.3 = MulS(t.3 4)
  t.5 = Add(t.5 t.3)
  [t.5+4] = t.4
  t.7 = 1
  t.8 = 7
  t.9 = [this+4]
  t.10 = [t.9+0]
  t.10 = LtS(t.7 t.10)
  if t.10 goto :bounds14
    Error("array index out of bounds")
  bounds14:
  t.7 = MulS(t.7 4)
  t.9 = Add(t.9 t.7)
  [t.9+4] = t.8
  t.11 = 2
  t.12 = 12
  t.13 = [this+4]
  t.14 = [t.13+0]
  t.14 = LtS(t.11 t.14)
  if t.14 goto :bounds15
    Error("array index out of bounds")
  bounds15:
  t.11 = MulS(t.11 4)
  t.13 = Add(t.13 t.11)
  [t.13+4] = t.12
  t.15 = 3
  t.16 = 18
  t.17 = [this+4]
  t.18 = [t.17+0]
  t.18 = LtS(t.15 t.18)
  if t.18 goto :bounds16
    Error("array index out of bounds")
  bounds16:
  t.15 = MulS(t.15 4)
  t.17 = Add(t.17 t.15)
  [t.17+4] = t.16
  t.19 = 4
  t.20 = 2
  t.21 = [this+4]
  t.22 = [t.21+0]
  t.22 = LtS(t.19 t.22)
  if t.22 goto :bounds17
    Error("array index out of bounds")
  bounds17:
  t.19 = MulS(t.19 4)
  t.21 = Add(t.21 t.19)
  [t.21+4] = t.20
  t.23 = 5
  t.24 = 11
  t.25 = [this+4]
  t.26 = [t.25+0]
  t.26 = LtS(t.23 t.26)
  if t.26 goto :bounds18
    Error("array index out of bounds")
  bounds18:
  t.23 = MulS(t.23 4)
  t.25 = Add(t.25 t.23)
  [t.25+4] = t.24
  t.27 = 6
  t.28 = 6
  t.29 = [this+4]
  t.30 = [t.29+0]
  t.30 = LtS(t.27 t.30)
  if t.30 goto :bounds19
    Error("array index out of bounds")
  bounds19:
  t.27 = MulS(t.27 4)
  t.29 = Add(t.29 t.27)
  [t.29+4] = t.28
  t.31 = 7
  t.32 = 9
  t.33 = [this+4]
  t.34 = [t.33+0]
  t.34 = LtS(t.31 t.34)
  if t.34 goto :bounds20
    Error("array index out of bounds")
  bounds20:
  t.31 = MulS(t.31 4)
  t.33 = Add(t.33 t.31)
  [t.33+4] = t.32
  t.35 = 8
  t.36 = 19
  t.37 = [this+4]
  t.38 = [t.37+0]
  t.38 = LtS(t.35 t.38)
  if t.38 goto :bounds21
    Error("array index out of bounds")
  bounds21:
  t.35 = MulS(t.35 4)
  t.37 = Add(t.37 t.35)
  [t.37+4] = t.36
  t.39 = 9
  t.40 = 5
  t.41 = [this+4]
  t.42 = [t.41+0]
  t.42 = LtS(t.39 t.42)
  if t.42 goto :bounds22
    Error("array index out of bounds")
  bounds22:
  t.39 = MulS(t.39 4)
  t.41 = Add(t.41 t.39)
  [t.41+4] = t.40
  t.43 = 0
  ret t.43
func AllocArray(size)
  bytes = MulS(size 4)
  bytes = Add(bytes 4)
  v = HeapAllocZ(bytes)
  [v] = size
  ret v
