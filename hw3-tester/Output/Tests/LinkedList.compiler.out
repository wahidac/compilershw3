

const methods_LL
  :LL.Start

const methods_List
  :List.Init
  :List.InitNew
  :List.Insert
  :List.SetNext
  :List.Delete
  :List.Search
  :List.GetEnd
  :List.GetElem
  :List.GetNext
  :List.Print

const methods_Element
  :Element.Init
  :Element.GetAge
  :Element.GetSalary
  :Element.GetMarried
  :Element.Equal
  :Element.Compare

func Main()
  t.0 = HeapAllocZ(4)
  [t.0+0] = :methods_LL
  if t.0 goto :null0
    Error("null pointer")
  null0:
  t.1 = t.0

  t.2 = [t.1+0]
  t.3 = [t.2+0]
  t.4 = call t.3(t.1)
  PrintIntS(t.4)
  ret

func Element.Init(this v_Age v_Salary v_Married)

  t.0 = v_Age
  [this+4] = t.0
  t.1 = v_Salary
  [this+8] = t.1
  t.2 = v_Married
  [this+12] = t.2
  t.3 = 1
  ret t.3
func Element.GetAge(this )

  t.0 = [this+4]
  ret t.0
func Element.GetSalary(this )

  t.0 = [this+8]
  ret t.0
func Element.GetMarried(this )

  t.0 = [this+12]
  ret t.0
func Element.Equal(this other)

  t.0 = 1
  ret_val = t.0
  t.1 = other

  t.2 = [t.1+0]
  t.3 = [t.2+4]
  t.4 = call t.3(t.1)
  aux01 = t.4
  t.5 = this
  t.6 = aux01
  t.7 = [this+4]
  t.8 = [t.5+0]
  t.9 = [t.8+20]
  t.10 = call t.9(t.5 t.6 t.7)
  t.11 = Sub(1 t.10)
  if0 t.11 goto :else4
    t.12 = 0
    ret_val = t.12
    goto :else_end4
  else4:

    t.13 = other

    t.14 = [t.13+0]
    t.15 = [t.14+8]
    t.16 = call t.15(t.13)
    aux02 = t.16
    t.17 = this
    t.18 = aux02
    t.19 = [this+8]
    t.20 = [t.17+0]
    t.21 = [t.20+20]
    t.22 = call t.21(t.17 t.18 t.19)
    t.23 = Sub(1 t.22)
    if0 t.23 goto :else3
      t.24 = 0
      ret_val = t.24
      goto :else_end3
    else3:
      t.25 = [this+12]
      if0 t.25 goto :else2
        t.26 = other

        t.27 = [t.26+0]
        t.28 = [t.27+12]
        t.29 = call t.28(t.26)
        t.30 = Sub(1 t.29)
        if0 t.30 goto :else0
          t.31 = 0
          ret_val = t.31
          goto :else_end0
        else0:
          t.32 = 0
          nt = t.32
        else_end0:
        goto :else_end2
      else2:
        t.33 = other

        t.34 = [t.33+0]
        t.35 = [t.34+12]
        t.36 = call t.35(t.33)
        if0 t.36 goto :else1
          t.37 = 0
          ret_val = t.37
          goto :else_end1
        else1:
          t.38 = 0
          nt = t.38
        else_end1:
      else_end2:
    else_end3:
  else_end4:
  t.39 = ret_val
  ret t.39
func Element.Compare(this num1 num2)

  t.0 = 0
  retval = t.0
  t.1 = num2
  t.2 = 1
  t.3 = Add(t.1 t.2)
  aux02 = t.3
  t.4 = num1
  t.5 = num2
  t.6 = LtS(t.4 t.5)
  if0 t.6 goto :else6
    t.7 = 0
    retval = t.7
    goto :else_end6
  else6:
    t.8 = num1
    t.9 = aux02
    t.10 = LtS(t.8 t.9)
    t.11 = Sub(1 t.10)
    if0 t.11 goto :else5
      t.12 = 0
      retval = t.12
      goto :else_end5
    else5:
      t.13 = 1
      retval = t.13
    else_end5:
  else_end6:
  t.14 = retval
  ret t.14

func List.Init(this )

  t.0 = 1
  [this+12] = t.0
  t.1 = 1
  ret t.1
func List.InitNew(this v_elem v_next v_end)

  t.0 = v_end
  [this+12] = t.0
  t.1 = v_elem
  [this+4] = t.1
  t.2 = v_next
  [this+8] = t.2
  t.3 = 1
  ret t.3
func List.Insert(this new_elem)

  t.0 = this
  aux03 = t.0
  t.1 = HeapAllocZ(16)
  [t.1+0] = :methods_List
  if t.1 goto :null1
    Error("null pointer")
  null1:
  t.2 = t.1
  aux02 = t.2
  t.3 = aux02
  t.4 = new_elem
  t.5 = aux03
  t.6 = 0
  t.7 = [t.3+0]
  t.8 = [t.7+4]
  t.9 = call t.8(t.3 t.4 t.5 t.6)
  ret_val = t.9
  t.10 = aux02
  ret t.10
func List.SetNext(this v_next)

  t.0 = v_next
  [this+8] = t.0
  t.1 = 1
  ret t.1
func List.Delete(this e)

  t.0 = this
  my_head = t.0
  t.1 = 0
  ret_val = t.1
  t.2 = 0
  t.3 = 1
  t.4 = Sub(t.2 t.3)
  aux04 = t.4
  t.5 = this
  aux01 = t.5
  t.6 = this
  prev = t.6
  t.7 = [this+12]
  var_end = t.7
  t.8 = [this+4]
  var_elem = t.8
  while0_top:
    t.9 = var_end
    t.10 = Sub(1 t.9)
    t.11 = ret_val
    t.12 = Sub(1 t.11)
    if0 t.10 goto :else7
      t.13 = t.12
      goto :else_end7
    else7:
      t.13 = 0
    else_end7:
    t.13 = t.13
    if0 t.13 goto :else11

      t.14 = e
      t.15 = var_elem
      t.16 = [t.14+0]
      t.17 = [t.16+16]
      t.18 = call t.17(t.14 t.15)
      if0 t.18 goto :else9

        t.19 = 1
        ret_val = t.19
        t.20 = aux04
        t.21 = 0
        t.22 = LtS(t.20 t.21)
        if0 t.22 goto :else8

          t.23 = aux01

          t.24 = [t.23+0]
          t.25 = [t.24+32]
          t.26 = call t.25(t.23)
          my_head = t.26
          goto :else_end8
        else8:

          t.27 = 0
          t.28 = 555
          t.29 = Sub(t.27 t.28)
          PrintIntS(t.29)
          t.30 = prev
          t.31 = aux01

          t.32 = [t.31+0]
          t.33 = [t.32+32]
          t.34 = call t.33(t.31)
          t.35 = [t.30+0]
          t.36 = [t.35+12]
          t.37 = call t.36(t.30 t.34)
          aux05 = t.37
          t.38 = 0
          t.39 = 555
          t.40 = Sub(t.38 t.39)
          PrintIntS(t.40)
        else_end8:
        goto :else_end9
      else9:
        t.41 = 0
        nt = t.41
      else_end9:
      t.42 = ret_val
      t.43 = Sub(1 t.42)
      if0 t.43 goto :else10

        t.44 = aux01
        prev = t.44
        t.45 = aux01

        t.46 = [t.45+0]
        t.47 = [t.46+32]
        t.48 = call t.47(t.45)
        aux01 = t.48
        t.49 = aux01

        t.50 = [t.49+0]
        t.51 = [t.50+24]
        t.52 = call t.51(t.49)
        var_end = t.52
        t.53 = aux01

        t.54 = [t.53+0]
        t.55 = [t.54+28]
        t.56 = call t.55(t.53)
        var_elem = t.56
        t.57 = 1
        aux04 = t.57
        goto :else_end10
      else10:
        t.58 = 0
        nt = t.58
      else_end10:
      goto :else_end11
    else11:
      goto :while0_end
    else_end11:
    goto :while0_top
  while0_end:
  t.59 = my_head
  ret t.59
func List.Search(this e)

  t.0 = 0
  int_ret_val = t.0
  t.1 = this
  aux01 = t.1
  t.2 = [this+12]
  var_end = t.2
  t.3 = [this+4]
  var_elem = t.3
  while1_top:
    t.4 = var_end
    t.5 = Sub(1 t.4)
    if0 t.5 goto :else13

      t.6 = e
      t.7 = var_elem
      t.8 = [t.6+0]
      t.9 = [t.8+16]
      t.10 = call t.9(t.6 t.7)
      if0 t.10 goto :else12

        t.11 = 1
        int_ret_val = t.11
        goto :else_end12
      else12:
        t.12 = 0
        nt = t.12
      else_end12:
      t.13 = aux01

      t.14 = [t.13+0]
      t.15 = [t.14+32]
      t.16 = call t.15(t.13)
      aux01 = t.16
      t.17 = aux01

      t.18 = [t.17+0]
      t.19 = [t.18+24]
      t.20 = call t.19(t.17)
      var_end = t.20
      t.21 = aux01

      t.22 = [t.21+0]
      t.23 = [t.22+28]
      t.24 = call t.23(t.21)
      var_elem = t.24
      goto :else_end13
    else13:
      goto :while1_end
    else_end13:
    goto :while1_top
  while1_end:
  t.25 = int_ret_val
  ret t.25
func List.GetEnd(this )

  t.0 = [this+12]
  ret t.0
func List.GetElem(this )

  t.0 = [this+4]
  ret t.0
func List.GetNext(this )

  t.0 = [this+8]
  ret t.0
func List.Print(this )

  t.0 = this
  aux01 = t.0
  t.1 = [this+12]
  var_end = t.1
  t.2 = [this+4]
  var_elem = t.2
  while2_top:
    t.3 = var_end
    t.4 = Sub(1 t.3)
    if0 t.4 goto :else14

      t.5 = var_elem

      t.6 = [t.5+0]
      t.7 = [t.6+4]
      t.8 = call t.7(t.5)
      PrintIntS(t.8)
      t.9 = aux01

      t.10 = [t.9+0]
      t.11 = [t.10+32]
      t.12 = call t.11(t.9)
      aux01 = t.12
      t.13 = aux01

      t.14 = [t.13+0]
      t.15 = [t.14+24]
      t.16 = call t.15(t.13)
      var_end = t.16
      t.17 = aux01

      t.18 = [t.17+0]
      t.19 = [t.18+28]
      t.20 = call t.19(t.17)
      var_elem = t.20
      goto :else_end14
    else14:
      goto :while2_end
    else_end14:
    goto :while2_top
  while2_end:
  t.21 = 1
  ret t.21

func LL.Start(this )

  t.0 = HeapAllocZ(16)
  [t.0+0] = :methods_List
  if t.0 goto :null2
    Error("null pointer")
  null2:
  t.1 = t.0
  last_elem = t.1
  t.2 = last_elem

  t.3 = [t.2+0]
  t.4 = [t.3+0]
  t.5 = call t.4(t.2)
  aux01 = t.5
  t.6 = last_elem
  head = t.6
  t.7 = head

  t.8 = [t.7+0]
  t.9 = [t.8+0]
  t.10 = call t.9(t.7)
  aux01 = t.10
  t.11 = head

  t.12 = [t.11+0]
  t.13 = [t.12+36]
  t.14 = call t.13(t.11)
  aux01 = t.14
  t.15 = HeapAllocZ(16)
  [t.15+0] = :methods_Element
  if t.15 goto :null3
    Error("null pointer")
  null3:
  t.16 = t.15
  el01 = t.16
  t.17 = el01
  t.18 = 25
  t.19 = 37000
  t.20 = 0
  t.21 = [t.17+0]
  t.22 = [t.21+0]
  t.23 = call t.22(t.17 t.18 t.19 t.20)
  aux01 = t.23
  t.24 = head
  t.25 = el01
  t.26 = [t.24+0]
  t.27 = [t.26+8]
  t.28 = call t.27(t.24 t.25)
  head = t.28
  t.29 = head

  t.30 = [t.29+0]
  t.31 = [t.30+36]
  t.32 = call t.31(t.29)
  aux01 = t.32
  t.33 = 10000000
  PrintIntS(t.33)
  t.34 = HeapAllocZ(16)
  [t.34+0] = :methods_Element
  if t.34 goto :null4
    Error("null pointer")
  null4:
  t.35 = t.34
  el01 = t.35
  t.36 = el01
  t.37 = 39
  t.38 = 42000
  t.39 = 1
  t.40 = [t.36+0]
  t.41 = [t.40+0]
  t.42 = call t.41(t.36 t.37 t.38 t.39)
  aux01 = t.42
  t.43 = el01
  el02 = t.43
  t.44 = head
  t.45 = el01
  t.46 = [t.44+0]
  t.47 = [t.46+8]
  t.48 = call t.47(t.44 t.45)
  head = t.48
  t.49 = head

  t.50 = [t.49+0]
  t.51 = [t.50+36]
  t.52 = call t.51(t.49)
  aux01 = t.52
  t.53 = 10000000
  PrintIntS(t.53)
  t.54 = HeapAllocZ(16)
  [t.54+0] = :methods_Element
  if t.54 goto :null5
    Error("null pointer")
  null5:
  t.55 = t.54
  el01 = t.55
  t.56 = el01
  t.57 = 22
  t.58 = 34000
  t.59 = 0
  t.60 = [t.56+0]
  t.61 = [t.60+0]
  t.62 = call t.61(t.56 t.57 t.58 t.59)
  aux01 = t.62
  t.63 = head
  t.64 = el01
  t.65 = [t.63+0]
  t.66 = [t.65+8]
  t.67 = call t.66(t.63 t.64)
  head = t.67
  t.68 = head

  t.69 = [t.68+0]
  t.70 = [t.69+36]
  t.71 = call t.70(t.68)
  aux01 = t.71
  t.72 = HeapAllocZ(16)
  [t.72+0] = :methods_Element
  if t.72 goto :null6
    Error("null pointer")
  null6:
  t.73 = t.72
  el03 = t.73
  t.74 = el03
  t.75 = 27
  t.76 = 34000
  t.77 = 0
  t.78 = [t.74+0]
  t.79 = [t.78+0]
  t.80 = call t.79(t.74 t.75 t.76 t.77)
  aux01 = t.80
  t.81 = head
  t.82 = el02
  t.83 = [t.81+0]
  t.84 = [t.83+20]
  t.85 = call t.84(t.81 t.82)
  PrintIntS(t.85)
  t.86 = head
  t.87 = el03
  t.88 = [t.86+0]
  t.89 = [t.88+20]
  t.90 = call t.89(t.86 t.87)
  PrintIntS(t.90)
  t.91 = 10000000
  PrintIntS(t.91)
  t.92 = HeapAllocZ(16)
  [t.92+0] = :methods_Element
  if t.92 goto :null7
    Error("null pointer")
  null7:
  t.93 = t.92
  el01 = t.93
  t.94 = el01
  t.95 = 28
  t.96 = 35000
  t.97 = 0
  t.98 = [t.94+0]
  t.99 = [t.98+0]
  t.100 = call t.99(t.94 t.95 t.96 t.97)
  aux01 = t.100
  t.101 = head
  t.102 = el01
  t.103 = [t.101+0]
  t.104 = [t.103+8]
  t.105 = call t.104(t.101 t.102)
  head = t.105
  t.106 = head

  t.107 = [t.106+0]
  t.108 = [t.107+36]
  t.109 = call t.108(t.106)
  aux01 = t.109
  t.110 = 2220000
  PrintIntS(t.110)
  t.111 = head
  t.112 = el02
  t.113 = [t.111+0]
  t.114 = [t.113+16]
  t.115 = call t.114(t.111 t.112)
  head = t.115
  t.116 = head

  t.117 = [t.116+0]
  t.118 = [t.117+36]
  t.119 = call t.118(t.116)
  aux01 = t.119
  t.120 = 33300000
  PrintIntS(t.120)
  t.121 = head
  t.122 = el01
  t.123 = [t.121+0]
  t.124 = [t.123+16]
  t.125 = call t.124(t.121 t.122)
  head = t.125
  t.126 = head

  t.127 = [t.126+0]
  t.128 = [t.127+36]
  t.129 = call t.128(t.126)
  aux01 = t.129
  t.130 = 44440000
  PrintIntS(t.130)
  t.131 = 0
  ret t.131
func AllocArray(size)
  bytes = MulS(size 4)
  bytes = Add(bytes 4)
  v = HeapAllocZ(bytes)
  [v] = size
  ret v
