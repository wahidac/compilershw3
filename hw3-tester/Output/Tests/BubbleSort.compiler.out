

const methods_BBS
  :BBS.Start
  :BBS.Sort
  :BBS.Print
  :BBS.Init

func Main()
  t.0 = HeapAllocZ(12)
  [t.0+0] = :methods_BBS
  if t.0 goto :null0
    Error("null pointer")
  null0:
  t.1 = t.0
  t.2 = 10
  t.3 = [t.1+0]
  t.4 = [t.3+0]
  t.5 = call t.4(t.1 t.2)
  PrintIntS(t.5)
  ret

func BBS.Start(this sz)

  t.0 = this
  t.1 = sz
  t.2 = [t.0+0]
  t.3 = [t.2+12]
  t.4 = call t.3(t.0 t.1)
  aux01 = t.4
  t.5 = this

  t.6 = [t.5+0]
  t.7 = [t.6+8]
  t.8 = call t.7(t.5)
  aux01 = t.8
  t.9 = 99999
  PrintIntS(t.9)
  t.10 = this

  t.11 = [t.10+0]
  t.12 = [t.11+4]
  t.13 = call t.12(t.10)
  aux01 = t.13
  t.14 = this

  t.15 = [t.14+0]
  t.16 = [t.15+8]
  t.17 = call t.16(t.14)
  aux01 = t.17
  t.18 = 0
  ret t.18
func BBS.Sort(this )

  t.0 = [this+8]
  t.1 = 1
  t.2 = Sub(t.0 t.1)
  i = t.2
  t.3 = 0
  t.4 = 1
  t.5 = Sub(t.3 t.4)
  aux02 = t.5
  while1_top:
    t.6 = aux02
    t.7 = i
    t.8 = LtS(t.6 t.7)
    if0 t.8 goto :else2

      t.9 = 1
      j = t.9
      while0_top:
        t.10 = j
        t.11 = i
        t.12 = 1
        t.13 = Add(t.11 t.12)
        t.14 = LtS(t.10 t.13)
        if0 t.14 goto :else1

          t.15 = j
          t.16 = 1
          t.17 = Sub(t.15 t.16)
          aux07 = t.17
          t.18 = [this+4]
          t.19 = aux07
          t.20 = [t.18+0]
          t.20 = LtS(t.19 t.20)
          if t.20 goto :bounds0
            Error("array index out of bounds")
          bounds0:
          t.19 = MulS(t.19 4)
          t.18 = Add(t.18 t.19)
          t.21 = [t.18+4]
          aux04 = t.21
          t.22 = [this+4]
          t.23 = j
          t.24 = [t.22+0]
          t.24 = LtS(t.23 t.24)
          if t.24 goto :bounds1
            Error("array index out of bounds")
          bounds1:
          t.23 = MulS(t.23 4)
          t.22 = Add(t.22 t.23)
          t.25 = [t.22+4]
          aux05 = t.25
          t.26 = aux05
          t.27 = aux04
          t.28 = LtS(t.26 t.27)
          if0 t.28 goto :else0

            t.29 = j
            t.30 = 1
            t.31 = Sub(t.29 t.30)
            aux06 = t.31
            t.32 = [this+4]
            t.33 = aux06
            t.34 = [t.32+0]
            t.34 = LtS(t.33 t.34)
            if t.34 goto :bounds2
              Error("array index out of bounds")
            bounds2:
            t.33 = MulS(t.33 4)
            t.32 = Add(t.32 t.33)
            t.35 = [t.32+4]
            t = t.35
            t.36 = aux06
            t.37 = [this+4]
            t.38 = j
            t.39 = [t.37+0]
            t.39 = LtS(t.38 t.39)
            if t.39 goto :bounds3
              Error("array index out of bounds")
            bounds3:
            t.38 = MulS(t.38 4)
            t.37 = Add(t.37 t.38)
            t.40 = [t.37+4]
            t.41 = [this+4]
            t.42 = [t.41+0]
            t.42 = LtS(t.36 t.42)
            if t.42 goto :bounds4
              Error("array index out of bounds")
            bounds4:
            t.36 = MulS(t.36 4)
            t.41 = Add(t.41 t.36)
            [t.41+4] = t.40
            t.43 = j
            t.44 = t
            t.45 = [this+4]
            t.46 = [t.45+0]
            t.46 = LtS(t.43 t.46)
            if t.46 goto :bounds5
              Error("array index out of bounds")
            bounds5:
            t.43 = MulS(t.43 4)
            t.45 = Add(t.45 t.43)
            [t.45+4] = t.44
            goto :else_end0
          else0:
            t.47 = 0
            nt = t.47
          else_end0:
          t.48 = j
          t.49 = 1
          t.50 = Add(t.48 t.49)
          j = t.50
          goto :else_end1
        else1:
          goto :while0_end
        else_end1:
        goto :while0_top
      while0_end:
      t.51 = i
      t.52 = 1
      t.53 = Sub(t.51 t.52)
      i = t.53
      goto :else_end2
    else2:
      goto :while1_end
    else_end2:
    goto :while1_top
  while1_end:
  t.54 = 0
  ret t.54
func BBS.Print(this )

  t.0 = 0
  j = t.0
  while2_top:
    t.1 = j
    t.2 = [this+8]
    t.3 = LtS(t.1 t.2)
    if0 t.3 goto :else3

      t.4 = [this+4]
      t.5 = j
      t.6 = [t.4+0]
      t.6 = LtS(t.5 t.6)
      if t.6 goto :bounds6
        Error("array index out of bounds")
      bounds6:
      t.5 = MulS(t.5 4)
      t.4 = Add(t.4 t.5)
      t.7 = [t.4+4]
      PrintIntS(t.7)
      t.8 = j
      t.9 = 1
      t.10 = Add(t.8 t.9)
      j = t.10
      goto :else_end3
    else3:
      goto :while2_end
    else_end3:
    goto :while2_top
  while2_end:
  t.11 = 0
  ret t.11
func BBS.Init(this sz)

  t.0 = sz
  [this+8] = t.0
  t.1 = sz
  t.2 = call :AllocArray(t.1)
  [this+4] = t.2
  t.3 = 0
  t.4 = 20
  t.5 = [this+4]
  t.6 = [t.5+0]
  t.6 = LtS(t.3 t.6)
  if t.6 goto :bounds7
    Error("array index out of bounds")
  bounds7:
  t.3 = MulS(t.3 4)
  t.5 = Add(t.5 t.3)
  [t.5+4] = t.4
  t.7 = 1
  t.8 = 7
  t.9 = [this+4]
  t.10 = [t.9+0]
  t.10 = LtS(t.7 t.10)
  if t.10 goto :bounds8
    Error("array index out of bounds")
  bounds8:
  t.7 = MulS(t.7 4)
  t.9 = Add(t.9 t.7)
  [t.9+4] = t.8
  t.11 = 2
  t.12 = 12
  t.13 = [this+4]
  t.14 = [t.13+0]
  t.14 = LtS(t.11 t.14)
  if t.14 goto :bounds9
    Error("array index out of bounds")
  bounds9:
  t.11 = MulS(t.11 4)
  t.13 = Add(t.13 t.11)
  [t.13+4] = t.12
  t.15 = 3
  t.16 = 18
  t.17 = [this+4]
  t.18 = [t.17+0]
  t.18 = LtS(t.15 t.18)
  if t.18 goto :bounds10
    Error("array index out of bounds")
  bounds10:
  t.15 = MulS(t.15 4)
  t.17 = Add(t.17 t.15)
  [t.17+4] = t.16
  t.19 = 4
  t.20 = 2
  t.21 = [this+4]
  t.22 = [t.21+0]
  t.22 = LtS(t.19 t.22)
  if t.22 goto :bounds11
    Error("array index out of bounds")
  bounds11:
  t.19 = MulS(t.19 4)
  t.21 = Add(t.21 t.19)
  [t.21+4] = t.20
  t.23 = 5
  t.24 = 11
  t.25 = [this+4]
  t.26 = [t.25+0]
  t.26 = LtS(t.23 t.26)
  if t.26 goto :bounds12
    Error("array index out of bounds")
  bounds12:
  t.23 = MulS(t.23 4)
  t.25 = Add(t.25 t.23)
  [t.25+4] = t.24
  t.27 = 6
  t.28 = 6
  t.29 = [this+4]
  t.30 = [t.29+0]
  t.30 = LtS(t.27 t.30)
  if t.30 goto :bounds13
    Error("array index out of bounds")
  bounds13:
  t.27 = MulS(t.27 4)
  t.29 = Add(t.29 t.27)
  [t.29+4] = t.28
  t.31 = 7
  t.32 = 9
  t.33 = [this+4]
  t.34 = [t.33+0]
  t.34 = LtS(t.31 t.34)
  if t.34 goto :bounds14
    Error("array index out of bounds")
  bounds14:
  t.31 = MulS(t.31 4)
  t.33 = Add(t.33 t.31)
  [t.33+4] = t.32
  t.35 = 8
  t.36 = 19
  t.37 = [this+4]
  t.38 = [t.37+0]
  t.38 = LtS(t.35 t.38)
  if t.38 goto :bounds15
    Error("array index out of bounds")
  bounds15:
  t.35 = MulS(t.35 4)
  t.37 = Add(t.37 t.35)
  [t.37+4] = t.36
  t.39 = 9
  t.40 = 5
  t.41 = [this+4]
  t.42 = [t.41+0]
  t.42 = LtS(t.39 t.42)
  if t.42 goto :bounds16
    Error("array index out of bounds")
  bounds16:
  t.39 = MulS(t.39 4)
  t.41 = Add(t.41 t.39)
  [t.41+4] = t.40
  t.43 = 0
  ret t.43
func AllocArray(size)
  bytes = MulS(size 4)
  bytes = Add(bytes 4)
  v = HeapAllocZ(bytes)
  [v] = size
  ret v
