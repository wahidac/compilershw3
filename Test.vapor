const methods_BBS
  :BBS.Start
  :BBS.Sort
  :BBS.Print
  :BBS.Init

func Main()
  t.0 = HeapAllocZ(12)
  [t.0+0] = :methods_BBS
  if t.0 goto :null0
    Error("null pointer")
  null0:
  t.1 = t.0
  t.2 = 10
  t.3 = [t.1+0]
  t.4 = [t.3+0]
  t.5 = call t.4(t.1 t.2)
  PrintIntS(t.5)
  ret

func BBS.Start(this sz)

  t.6 = this
  t.7 = sz
  t.8 = [t.6+0]
  t.9 = [t.8+12]
  t.10 = call t.9(t.6 t.7)
  aux01 = t.10
  t.11 = this

  t.12 = [t.11+0]
  t.13 = [t.12+8]
  t.14 = call t.13(t.11)
  aux01 = t.14
  t.15 = 99999
  PrintIntS(t.15)
  t.16 = this

  t.17 = [t.16+0]
  t.18 = [t.17+4]
  t.19 = call t.18(t.16)
  aux01 = t.19
  t.20 = this

  t.21 = [t.20+0]
  t.22 = [t.21+8]
  t.23 = call t.22(t.20)
  aux01 = t.23
  t.24 = 0
  ret t.24
func BBS.Sort(this )

  t.25 = [this+8]
  t.26 = 1
  t.27 = Sub(t.25 t.26)
  i = t.27
  t.28 = 0
  t.29 = 1
  t.30 = Sub(t.28 t.29)
  aux02 = t.30
  while1_top:
    t.31 = aux02
    t.32 = i
    t.33 = LtS(t.31 t.32)
    if0 t.33 goto :else2

      t.34 = 1
      j = t.34
      while0_top:
        t.35 = j
        t.36 = i
        t.37 = 1
        t.38 = Add(t.36 t.37)
        t.39 = LtS(t.35 t.38)
        if0 t.39 goto :else1

          t.40 = j
          t.41 = 1
          t.42 = Sub(t.40 t.41)
          aux07 = t.42
          t.43 = [this+4]
          t.44 = aux07
          t.45 = [t.43+0]
          t.45 = LtS(t.44 t.45)
          if t.45 goto :bounds0
            Error("array index out of bounds")
          bounds0:
          t.44 = MulS(t.44 4)
          t.43 = Add(t.43 t.44)
          t.46 = [t.43+4]
          aux04 = t.46
          t.47 = [this+4]
          t.48 = j
          t.49 = [t.47+0]
          t.49 = LtS(t.48 t.49)
          if t.49 goto :bounds1
            Error("array index out of bounds")
          bounds1:
          t.48 = MulS(t.48 4)
          t.47 = Add(t.47 t.48)
          t.50 = [t.47+4]
          aux05 = t.50
          t.51 = aux05
          t.52 = aux04
          t.53 = LtS(t.51 t.52)
          if0 t.53 goto :else0

            t.54 = j
            t.55 = 1
            t.56 = Sub(t.54 t.55)
            aux06 = t.56
            t.57 = [this+4]
            t.58 = aux06
            t.59 = [t.57+0]
            t.59 = LtS(t.58 t.59)
            if t.59 goto :bounds2
              Error("array index out of bounds")
            bounds2:
            t.58 = MulS(t.58 4)
            t.57 = Add(t.57 t.58)
            t.60 = [t.57+4]
            t = t.60
            t.61 = aux06
            t.62 = [this+4]
            t.63 = j
            t.64 = [t.62+0]
            t.64 = LtS(t.63 t.64)
            if t.64 goto :bounds3
              Error("array index out of bounds")
            bounds3:
            t.63 = MulS(t.63 4)
            t.62 = Add(t.62 t.63)
            t.65 = [t.62+4]
            t.66 = [this+4]
            t.67 = [t.66+0]
            t.67 = LtS(t.61 t.67)
            if t.67 goto :bounds4
              Error("array index out of bounds")
            bounds4:
            t.61 = MulS(t.61 4)
            t.66 = Add(t.66 t.61)
            [t.66+4] = t.65
            t.68 = j
            t.69 = t
            t.70 = [this+4]
            t.71 = [t.70+0]
            t.71 = LtS(t.68 t.71)
            if t.71 goto :bounds5
              Error("array index out of bounds")
            bounds5:
            t.68 = MulS(t.68 4)
            t.70 = Add(t.70 t.68)
            [t.70+4] = t.69
            goto :else_end0
          else0:
            t.72 = 0
            nt = t.72
          else_end0:
          t.73 = j
          t.74 = 1
          t.75 = Add(t.73 t.74)
          j = t.75
          goto :else_end1
        else1:
          goto :while0_end
        else_end1:
        goto :while0_top
      while0_end:
      t.76 = i
      t.77 = 1
      t.78 = Sub(t.76 t.77)
      i = t.78
      goto :else_end2
    else2:
      goto :while1_end
    else_end2:
    goto :while1_top
  while1_end:
  t.79 = 0
  ret t.79
func BBS.Print(this )

  t.80 = 0
  j = t.80
  while2_top:
    t.81 = j
    t.82 = [this+8]
    t.83 = LtS(t.81 t.82)
    if0 t.83 goto :else3

      t.84 = [this+4]
      t.85 = j
      t.86 = [t.84+0]
      t.86 = LtS(t.85 t.86)
      if t.86 goto :bounds6
        Error("array index out of bounds")
      bounds6:
      t.85 = MulS(t.85 4)
      t.84 = Add(t.84 t.85)
      t.87 = [t.84+4]
      PrintIntS(t.87)
      t.88 = j
      t.89 = 1
      t.90 = Add(t.88 t.89)
      j = t.90
      goto :else_end3
    else3:
      goto :while2_end
    else_end3:
    goto :while2_top
  while2_end:
  t.91 = 0
  ret t.91
func BBS.Init(this sz)

  t.92 = sz
  [this+8] = t.92
  t.93 = sz
  t.94 = call :AllocArray(t.93)
  [this+4] = t.94
  t.95 = 0
  t.96 = 20
  t.97 = [this+4]
  t.98 = [t.97+0]
  t.98 = LtS(t.95 t.98)
  if t.98 goto :bounds7
    Error("array index out of bounds")
  bounds7:
  t.95 = MulS(t.95 4)
  t.97 = Add(t.97 t.95)
  [t.97+4] = t.96
  t.99 = 1
  t.100 = 7
  t.101 = [this+4]
  t.102 = [t.101+0]
  t.102 = LtS(t.99 t.102)
  if t.102 goto :bounds8
    Error("array index out of bounds")
  bounds8:
  t.99 = MulS(t.99 4)
  t.101 = Add(t.101 t.99)
  [t.101+4] = t.100
  t.103 = 2
  t.104 = 12
  t.105 = [this+4]
  t.106 = [t.105+0]
  t.106 = LtS(t.103 t.106)
  if t.106 goto :bounds9
    Error("array index out of bounds")
  bounds9:
  t.103 = MulS(t.103 4)
  t.105 = Add(t.105 t.103)
  [t.105+4] = t.104
  t.107 = 3
  t.108 = 18
  t.109 = [this+4]
  t.110 = [t.109+0]
  t.110 = LtS(t.107 t.110)
  if t.110 goto :bounds10
    Error("array index out of bounds")
  bounds10:
  t.107 = MulS(t.107 4)
  t.109 = Add(t.109 t.107)
  [t.109+4] = t.108
  t.111 = 4
  t.112 = 2
  t.113 = [this+4]
  t.114 = [t.113+0]
  t.114 = LtS(t.111 t.114)
  if t.114 goto :bounds11
    Error("array index out of bounds")
  bounds11:
  t.111 = MulS(t.111 4)
  t.113 = Add(t.113 t.111)
  [t.113+4] = t.112
  t.115 = 5
  t.116 = 11
  t.117 = [this+4]
  t.118 = [t.117+0]
  t.118 = LtS(t.115 t.118)
  if t.118 goto :bounds12
    Error("array index out of bounds")
  bounds12:
  t.115 = MulS(t.115 4)
  t.117 = Add(t.117 t.115)
  [t.117+4] = t.116
  t.119 = 6
  t.120 = 6
  t.121 = [this+4]
  t.122 = [t.121+0]
  t.122 = LtS(t.119 t.122)
  if t.122 goto :bounds13
    Error("array index out of bounds")
  bounds13:
  t.119 = MulS(t.119 4)
  t.121 = Add(t.121 t.119)
  [t.121+4] = t.120
  t.123 = 7
  t.124 = 9
  t.125 = [this+4]
  t.126 = [t.125+0]
  t.126 = LtS(t.123 t.126)
  if t.126 goto :bounds14
    Error("array index out of bounds")
  bounds14:
  t.123 = MulS(t.123 4)
  t.125 = Add(t.125 t.123)
  [t.125+4] = t.124
  t.127 = 8
  t.128 = 19
  t.129 = [this+4]
  t.130 = [t.129+0]
  t.130 = LtS(t.127 t.130)
  if t.130 goto :bounds15
    Error("array index out of bounds")
  bounds15:
  t.127 = MulS(t.127 4)
  t.129 = Add(t.129 t.127)
  [t.129+4] = t.128
  t.131 = 9
  t.132 = 5
  t.133 = [this+4]
  t.134 = [t.133+0]
  t.134 = LtS(t.131 t.134)
  if t.134 goto :bounds16
    Error("array index out of bounds")
  bounds16:
  t.131 = MulS(t.131 4)
  t.133 = Add(t.133 t.131)
  [t.133+4] = t.132
  t.135 = 0
  ret t.135
func AllocArray(size)
  bytes = MulS(size 4)
  bytes = Add(bytes 4)
  v = HeapAllocZ(bytes)
  [v] = size
  ret v
